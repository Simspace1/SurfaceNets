using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LoadRegions : MonoBehaviour
{
    [SerializeField]
    private World world;

    private int timer = 0;

    public static int maxRegionRadius = 10;
    public static int fullResRegionRadius = 2;
    public static int regionColUpdates = 1;

    public static List<RegionPos> newRegionWaitList = new List<RegionPos>();

    private List<RegionPos> regionList = new List<RegionPos>();

    private RegionCol regionCol;
    private List<Region> createList = new List<Region>();
    private List<Region> generateList = new List<Region>();
    private List<Region> updateList = new List<Region>();
    private List<Region> renderList = new List<Region>();

    private RegionPos playerPos;
    private bool chunksGenerating = false;

    // Start is called before the first frame update
    void Start()
    {
        for(int radius = 0; radius <= maxRegionRadius; radius++){
            for(int x = 0; x <= radius; x++){
                for(int z = 0; z <=radius; z++){
                    if((Mathf.Abs(x) == radius || Mathf.Abs(z) == radius) && MyMath.Hypothenuse(x,z) <= maxRegionRadius){
                        regionList.Add(new RegionPos(x,0,z));
                    }
                }
            }
        }
    }

    // Update is called once per frame
    void Update()
    {
        UpdatePlayerPos();
        if(LoadWaitList()){
            return;
        }

        if(Unload()){
            return;
        }

        Load();
    }

    //Load/Create regions with priority, mostly from terrain modifications
    private bool LoadWaitList()
    {
        if(newRegionWaitList.Count == 0){
            return false;
        }
        return false;
    }

    private void UpdatePlayerPos()
    {
        WorldPos ppos = new WorldPos(transform.position.x, transform.position.y, transform.position.z);
        playerPos = ppos.GetRegion();
    }

    private void Load(){
        if(RenderRegions()){return;}
        if(UpdateRegions()){return;}
        if(GenerateRegions()){return;}
        if(CreateRegions()){return;}
        if(CreateRegionColumn()){return;}
        UpdateFullResRegions();
    }

    private void UpdateFullResRegions(){
        throw new NotImplementedException();
    }

    private bool CreateRegionColumn()
    {
        if(regionCol != null){
            if(regionCol.generating){
                return true;
            }
            List<RegionSurfacePos> regions = regionCol.GetLoadingRegions();
            bool loading = true;
            if(regions.Count == 0){
                regions = regionCol.GetRegionList();
                loading = false;
                world.AddRegionCol(regionCol);
            }

            foreach(RegionSurfacePos surfacePos in regions){
                createList.Add(regionCol.GetRegion(surfacePos.regionPos));
            }

            if(loading){
                regionCol.clearLoadingList();
            }
            regionCol = null;
            return true;
        }
        else{
            RegionCol col = null;
            bool flag = false;
            foreach(RegionPos regionPos in regionList){
                RegionPos pos = playerPos.GetColumn().Add(regionPos);
                col = World.GetWorld().GetRegionCol(pos);

                if(col != null && !col.IsComplete()){
                    flag = col.LoadRegions(playerPos);
                    if(flag){
                        regionCol = col;
                        return true;
                    }
                }
                else if(col == null){
                    regionCol = new RegionCol(pos);
                    return true;
                }
            }
            return false;
        }
    }

    private bool CreateRegions()
    {
        if(createList.Count == 0){
            return false;
        }

        foreach(Region region in createList){
            Debug.Assert(region.generated, "Region "+region.regionPos.ToString()+ "was not generated by RegionCol");
            region.CreateAllChunks();
            generateList.Add(region);
        }
        createList.Clear();
        return true;
    }

    private bool GenerateRegions()
    {
        if(generateList.Count == 0){
            return false;
        }
        if(chunksGenerating){
            int done = 0;
            foreach(Region region in generateList){
                if(region.chunksGenerated){
                    done++;
                }
            }

            if(done == generateList.Count){
                foreach(Region region in generateList){
                    updateList.Add(region);
                }
                generateList.Clear();
                chunksGenerating = false;
            }
            return true;
        }
        else{
            foreach(Region region in generateList){
                region.GenerateAllChunks();
            }
            chunksGenerating = true;
            return true;
        }
    }

    private bool UpdateRegions()
    {
        throw new NotImplementedException();
    }

    private bool RenderRegions()
    {
        throw new NotImplementedException();
    }

    private bool Unload(){
        return false;
    }

    private void ListRemover<T>(List<T> mainList, List<T> removeList){
        foreach(T obj in removeList){
            mainList.Remove(obj);
        }
    }
}
